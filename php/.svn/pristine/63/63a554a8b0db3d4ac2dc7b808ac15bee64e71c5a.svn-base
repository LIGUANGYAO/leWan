<?php
namespace app\system\model;

use app\common\model\AccountRecordModel;
use app\common\model\Currency;
use app\common\model\CurrencyAction;
use think\Db;
use think\Config;
use think\Request;
use think\Session;
use think\Cache;

/**
 * 会员相关
 * Enter description here ...
 * @author Administrator
 *
 */

class UserModel extends BaseModel{

    public static function TableName(){
        return Db::name("user");
    }

    /**
     * @param array $Condition     查询条件
     * @param int $Psize           当前分页数
     * @param int $PageSize        分页条数
     * @return mixed
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 肖亚子
     * 获取用户
     */
    public static function UserList($Condition=array(), $Psize=1, $PageSize=10){
        $Field = 'u.user_id,u.recode,u.mobile,u.nickname,u.username,u.avatar,u.userthumb,u.purchasetag,u.purchasetype,u.`level`, u.path,u.auth,u.freesheet,u.lookover,u.status,u.reg_type,u.distributor,u.reg_time, u.viewtimes_all, u.upgrade_time,'.
                ' r.nickname as rnickname,r.avatar as thumb , r.mobile as rmobile,'.
                ' l.nickname as lnickname,l.avatar as lthumb, l.mobile as lmobile';
        //查询总记录
        $Count     = self::TableName()
                        ->alias("u")
                        ->where($Condition)
                        ->count();

        $PageCount = ceil($Count/$PageSize);
        $List      = self::TableName()
                        ->alias("u")
                        ->field($Field)
                        ->join("user r","r.user_id = u.reid","left")
                        ->join("user l","l.user_id = u.sid","left")
                        ->where($Condition)
                        ->page($Psize, $PageSize)
                        ->order("u.upgrade_time desc")
                        ->select();
        $PaginaTion = parent::Paging($Count,$Psize,$PageCount,$List);

        return $PaginaTion;
    }

    /**
     * @param array $Condition  查询条件
     * @return false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 
     */
    public static function UserListExcel($Condition=array()){
        $Field = "u.nickname,u.mobile,u.recode,r.nickname as rnickname,u.reg_type,u.purchasetag,u.purchasetype,u.level,u.auth,u.status,u.reg_time";
        $List  = self::TableName()
                        ->alias("u")
                        ->field($Field)
                        ->Join("user r","r.reid = u.user_id","left")
                        ->where($Condition)
                        ->group("u.user_id")
                        ->order("u.user_id desc")
                        ->select();
        return $List;
    }

    /**
     * @return false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 获取每级用户的总数量
     * 肖亚子
     */
    public static function UserCount($Condition = array()){
        $Condition["u.reg_type"] = array("eq",1);
        $Condition["u.user_id"]  = array("neq",1);
        $UserListCount = self::TableName()
                            ->alias("u")
                            ->field("count(u.level) as count,u.level")
                            ->join("user r","r.user_id = u.reid","left")
                            ->where($Condition)
                            ->group("u.level")
                            ->select();

        $UserLevel["ordinary"] = 0;
        $UserLevel["super"]    = 0;
        $UserLevel["share"]    = 0;
        $UserLevel["operate"]  = 0;
        $UserLevel["dandy"]    = 0;

        foreach ($UserListCount as $Key => $Val){
            switch ($Val["level"]){
                case 1:$UserLevel["ordinary"] = $Val["count"];break;
                case 2:$UserLevel["super"]    = $Val["count"];break;
                case 3:$UserLevel["share"]    = $Val["count"];break;
                case 4:$UserLevel["operate"]  = $Val["count"];break;
                case 5:$UserLevel["dandy"]    = $Val["count"];break;
            }

        }

        return $UserLevel;
    }
    /**
     * @param $Data   添加内容
     * @return int|string
     * 添加用户
     * 肖亚子
     */
    public static function UserAdd($Data){
        $UserData = self::TableName()->insertGetId($Data);

        return $UserData;
    }

    /**
     * @param array $Condition    查询条件
     * @param string $Field       查询字段
     * @return array|false|\PDOStatement|string|\think\Model
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 获取用户详情
     * 肖亚子
     */
    public static function UserFind($Condition = array(),$Field = "*"){
        $Data = self::TableName()->field($Field)->where($Condition)->find();

        return $Data;
    }

    /**
     * @param $Token  生成的token
     * @return mixed
     * 获取token用户是否存在
     */
    public static function UserFindUid($Token){
        $Data = self::TableName()->where("token","=",$Token)->value("user_id");

        return $Data;
    }
    /**
     * @param array $Condition  修改条件
     * @param $Data             修改内容
     * @return int|string
     * @throws \think\Exception
     * @throws \think\exception\PDOException
     * 修改用户信息
     * 肖亚子
     */
    public static function UserUpdate($Condition = array(),$Data){
        $Data = self::TableName()->where($Condition)->update($Data);

        return $Data;
    }

    /**
     * @param $Data      添加内容
     * @return int|string
     * 用户等级修改记录
     * 肖亚子
     */
    public static function UserUpgrade($Data){
        $Data = Db::name("user_upgrade")->insert($Data);

        return $Data;
    }

    public static function getUserAccountList($condition=array(), $page=1, $pageSize=20){
        $Field = "u.user_id,u.mobile,u.nickname,u.avatar, u.level,a.*";
        $Count = Db::name('account a')
            ->join('user u','u.user_id=a.user_id','left')
            ->where($condition)
            ->count();

        $PageCount = ceil($Count/$pageSize);
        $list = Db::name('account a')
            ->field($Field)
            ->join('user u','u.user_id=a.user_id','left')
            ->where($condition)
            ->page($page, $pageSize)->order('a.account_uptime desc')->select();

        $PaginaTion = parent::Paging($Count,$page,$PageCount,$list);
        return $PaginaTion;

    }


    public function tongjiList($map=array(), $pagenow=1, $pagesize=20){
        //查询总记录
        $count = Db::name('user_tongji')->where($map)->count();

        $list = Db::name('user_tongji')->where($map)
            ->page($pagenow, $pagesize)
            ->order(' tag desc')
            ->select();
        foreach ($list as $k=>$v){
            $list[$k]['tag'] = substr($v['tag'],0,4).'-'.substr($v['tag'],4,2).'-'.substr($v['tag'],6,2);
        }
        $return['list'] = $list;
        //总计
        $viewtimes = Db::name('user')->sum('viewtimes_all');
        if($viewtimes > 10000){
            $viewtimes = (round($viewtimes/100)/100).'万次';
        }elseif($viewtimes > 1000){
            $viewtimes = ($viewtimes/1000).'千次';
        }
        $return['zongji']['viewtimes'] = $viewtimes;
        $return['zongji']['userallcount'] = Db::name('user')->where(['user_id'=>['gt', 1], 'reg_type'=>1])->count();
        $return['zongji']['user1count'] = Db::name('user')->where(['level'=>1, 'user_id'=>['gt', 1], 'reg_type'=>1])->count();
        $return['zongji']['user2count'] = Db::name('user')->where(['level'=>2, 'user_id'=>['gt', 1], 'reg_type'=>1])->count();
        $return['zongji']['user3count'] = Db::name('user')->where(['level'=>3, 'user_id'=>['gt', 1], 'reg_type'=>1])->count();
        $return['zongji']['user4count'] = Db::name('user')->where(['level'=>4, 'user_id'=>['gt', 1], 'reg_type'=>1])->count();
        $return['zongji']['user5count'] = Db::name('user')->where(['level'=>5, 'user_id'=>['gt', 1], 'reg_type'=>1])->count();
        //今日
        $jrtime = strtotime(date('Y-m-d'));
        $viewtimes = Db::name('user')->where(['up_time'=>['gt', $jrtime]])->sum('viewtimes_everyday');
        if($viewtimes > 10000){
            $viewtimes = (round($viewtimes/100)/100).'万次';
        }elseif($viewtimes > 1000){
            $viewtimes = ($viewtimes/1000).'千次';
        }
        $return['jiri']['viewtimes'] = $viewtimes;
        $return['jiri']['userallcount'] = Db::name('user')->where(['user_id'=>['gt', 1], 'reg_type'=>1])->count();
        $return['jiri']['user1count'] = Db::name('user')->where(['level'=>1, 'user_id'=>['gt', 1] ,'upgrade_time'=>['gt', $jrtime], 'reg_type'=>1])->count();
        $return['jiri']['user2count'] = Db::name('user')->where(['level'=>2, 'user_id'=>['gt', 1] ,'upgrade_time'=>['gt', $jrtime], 'reg_type'=>1])->count();
        $return['jiri']['user3count'] = Db::name('user')->where(['level'=>3, 'user_id'=>['gt', 1] ,'upgrade_time'=>['gt', $jrtime], 'reg_type'=>1])->count();
        $return['jiri']['user4count'] = Db::name('user')->where(['level'=>4, 'user_id'=>['gt', 1] ,'upgrade_time'=>['gt', $jrtime], 'reg_type'=>1])->count();
        $return['jiri']['user5count'] = Db::name('user')->where(['level'=>5, 'user_id'=>['gt', 1] ,'upgrade_time'=>['gt', $jrtime], 'reg_type'=>1])->count();

        $pagination = new PaginationModel();
        $return['page'] = $pagination->getPage($count, $pagenow, $pagesize);
        return $return;
    }


    public function getMonthList(){
        $data['list'] = ['2018-11','2018-12','2019-01','2019-02','2019-03','2019-04','2019-05','2019-06','2019-07','2019-08','2019-09','2019-10','2019-11','2019-12'];
        $data['now'] = date('Y-m');
        return $data;
    }



    /**
     * 会员收入明细
     */
    public function getAccountRecordInfo($curreny, $month, $map=array(), $pagenow=1, $pagesize=20){
        $table = 'account_'.$curreny.$month;
        try{
            $count = Db::name($table)->where($map)->count();

            $list = Db::name($table)
                ->where($map)
                ->page($pagenow, $pagesize)
                ->order('record_id asc')
                ->select();
            foreach ($list as $k=>$v){
                $list[$k]['record_action'] = CurrencyAction::getLabel($v['record_action']);
                if($curreny == Currency::Commission){
                    if($v['record_status'] == 2){
                        $list[$k]['record_status'] = '结算成功';
                    }else{
                        $list[$k]['record_status'] = '待结算';
                    }
                }else{
                    $list[$k]['record_status'] = '成功';
                }
            }
        }catch (\Exception $e){

        }
        $return['list'] = $list;
        $pagination = new PaginationModel();
        $return['page'] = $pagination->getPage($count, $pagenow, $pagesize);
        return $return;
    }


    public function getBalanceCount(){
        $total = Db::name('account')->field('sum(account_cash_balance) as cash_balance, sum(account_commission_balance) as commission_balance')
            ->where(['account_tag'=>0])->find();
        return $total;
    }


    /**
     * 会员收入明细
     */
    public function getbizdata($sort, $map=array(), $pagenow=1, $pagesize=20){

        $count = Db::name('temp_userdata')->where($map)->count();
        $list = Db::name('temp_userdata')
            ->where($map)
            ->page($pagenow, $pagesize)
            ->order($sort)
            ->select();

        $return['list'] = $list;
        $pagination = new PaginationModel();
        $return['page'] = $pagination->getPage($count, $pagenow, $pagesize);
        return $return;
    }


    /**
     * 更新会员账户资金
     * @param $act  1=扣款；2=充值
     * @param $currency
     * @param $account
     * @param $money
     */
    public function changeAccount($act, $currency, $account, $money){
        $arm = new AccountRecordModel();
        if($act == 1){//扣款
            if($account['account_'.$currency.'_balance'] < $money){
                $money = $account['account_'.$currency.'_balance'];
            }
            if($currency == Currency::Cash){
                $currencyaction = CurrencyAction::CashDeducAdmin;
            }else{
                $currencyaction = CurrencyAction::CommissionDecodeBack;
            }
            return $arm->add($account['user_id'], 0, $currency, $currencyaction, -$money, $arm->getRecordAttach(session('admin.id'),session('admin.jname')), '管理员后台扣除');
        }else{
            //充值功能没开放
            $record_status = 2;
            if($currency == Currency::Cash){
                $currencyaction = CurrencyAction::CashRecharge;
            }else{
                //充值佣金，次日结算
                $record_status = 1;
                $currencyaction = CurrencyAction::CommissionRecharge;
            }
            return $arm->add($account['user_id'], 0, $currency, $currencyaction, $money, $arm->getRecordAttach(session('admin.id'),session('admin.jname')), '管理员后台充值', $record_status);
        }
        return false;
    }


}
