<?php
namespace app\api\controller;

use app\api\model\HelpModel;
use app\api\model\MallOrderModel;
use app\api\model\NotifyModel;
use app\common\BaseController;
use app\common\model\ProcedureModel;
use think\Config;
use think\Db;

/**
 * 订单类
 * Enter description here ...
 * @author yihong
 *
 */
class OrderController extends BaseController
{

    /**
     * 分销商批量下单
     * @return bool
     */
    public function createBatchOrderByDistributor(){
        $data['product_id'] = $this->post('product_id');
        $data['remark'] = $this->post('remark');
        $data['user_id'] = $this->post('user_id');
        $data['time'] = $this->post('time');
        ksort($data);
        $signkey = $this->post('key');
        if(getSelfSignStr($data) != $signkey){
            GLog('分销商发码','签名错误');
            return array('code'=>400);
        }
        $list = json_decode( $this->post('list'),true);
        foreach ($list as $val){
            $val['create_order_type'] = 1;
            $val['is_distributor'] = 1;
            $this->submitOrder(array_merge($val,$data));
        }

    }

    /**
     * 单品下单-只生成电子码
     * @return bool
     */
    public function createOrder(){
        $data['buynum'] = $this->post('buynum');
        $data['concat'] = $this->post('concat');
        $data['mobile'] = $this->post('mobile');
        $data['product_id'] = $this->post('product_id');
        $data['price_id'] = $this->post('price_id');
        $data['price_settle'] = $this->post('price_settle');
        $data['price'] =  $this->post('price',0);//后台输入结算价
        $data['remark'] = $this->post('remark');
        $data['user_id'] = $this->post('user_id');
        $data['time'] = $this->post('time');
        ksort($data);
        $signkey = $this->post('key');
        if(getSelfSignStr($data) != $signkey){
            GLog('后台单品下单',$signkey.'////'.getSelfSignStr($data).'签名错误'.json_encode($data));
            return array('code'=>400);
        }
        if($data['user_id']!=15439){
            $data['is_sys_giving'] = 1;
        }
        $this->submitOrder($data);

    }

    /**
     * 导入Excel批量下单- 发送短信
     * @return array
     */
    public function createBatchOrder(){
        $data['concat'] = $this->post('concat');
        $data['remark'] = $this->post('remark');
        $data['user_id'] = $this->post('user_id');
        $data['time'] =$this->post('time');
        $signkey = $this->post('key');
        ksort($data);
        if(getSelfSignStr($data) != $signkey){
            GLog('后台批量下单','签名错误');
            return array('code'=>400);
        }
        $list = json_decode( $this->post('list'),true);
        foreach ($list as $val){
            $price_id = DB::name('product_price')->where(array('product_id'=>$val['product_id']))->value('price_id');
            $val['price_id'] = $price_id;
            $val['create_order_type'] = 1;
            $this->submitOrder(array_merge($val,$data));
        }
    }


    /**
     * 提交订单
     */
    private function submitOrder($data){
        $order_no =  HelpModel::makeOrderNumber();
        Db::startTrans();
        //锁表
        Db::name('product_price')->lock(true)->find($data['price_id']);
        $res = $this->buildOrder1($order_no, $data);
        if($res){
            $field = 'o.*, p.product_name, p.product_returnall, p.product_id, p.price_id,
             p.op_id, p.commission, p.num, p.product_startusetime, p.product_endusetime,u.distributor,u.nickname';
            $order = Db::name('order o')->field($field)
                ->join('jay_order_product p', 'p.order_id = o.order_id', 'left')
                ->join('jay_user u', 'u.user_id = o.user_id', 'left')
                ->where(['order_no'=>$order_no])->find();

            //生成电子码
            $consume_code='';
            if($order['order_isexpress'] == 1){
                $mom = new MallOrderModel();
                $consume_code = $mom->buildConsumeCode($order['order_id'], $order['num'], $order['user_id'], $order['op_id']);
            }

            if(isset($data['create_order_type'])){ //后台批量下单才有短信通知
                //短信通知
                if($data['product_id'] == 23){
                    $this->sendOrderSmsToTooth($order, $consume_code);
                }else{
                    if(isset($data['is_distributor']) && $data['is_distributor']){
                        $this->sendOrderSmsOfDistributor($order, $consume_code);
                    }else{
                        $notify = new NotifyModel();
                        $notify->sendOrderSms($order, $consume_code, $this->CFG);
                    }

                }
            }

            $pm = new ProcedureModel();
            $res2 = $pm->execute('lewan_order_income', $order['order_id'], '@error');
            $res3 = $pm->execute('lewan_user_performance', $order['order_id'], '@error');
            if($res2 && $res3){
                Db::commit();
                GLog("下单成功",'下单成功');
                return true;
                return array('code'=>200,'下单成功');
            }
            GLog("下单失败",$res2.'下单失败'.$res3);
            return false;
        }
        Db::rollback();
        return false;
        return array('code'=>400,'下单失败');
    }


    /**
     * 口腔商品短信
     * @param $order
     * @param $consume_code
     * @param $cfg
     * @return bool
     */
    public function sendOrderSmsOfDistributor($order, $consume_code){

        if($order['order_isexpress'] == 1){ //到店
            if($order['order_reservation'] == 1){ //预约
                $content = config('cdxx_sms.content_ordersuccess_distributoryuyue');
            }else{
                $content = config('cdxx_sms.content_ordersuccess_distributor');
            }
        } else{ //快递
            $content = config('cdxx_sms.content_ordersuccess_delivery_distributoryuyue');
        }

        $sign = DB::name('user')->where(array('user_id'=>$order['user_id']))->value('nickname');
        $content = str_replace('{sign}',$sign,$content);
        $content = str_replace('{name}', $order['order_fullname'], $content);
        $content = str_replace('{product}', $order['product_name'], $content);
        $content = str_replace('{num}', $order['num'], $content);
        $content = str_replace('{orderno}', $order['order_no'], $content);
        if($consume_code){
            $content = str_replace('{code}', $consume_code, $content);
            if(strpos($consume_code,',')!==false){
                $codearray = explode(',', $consume_code);
                $yyurl='';
                foreach($codearray as $k=>$v){
                    $hash = Db::name('order_consume_code')->where(['consume_code'=>$v])->value('hash');
                    $nativeurl=($_SERVER['REQUEST_SCHEME']?$_SERVER['REQUEST_SCHEME']:'http').'://'.$_SERVER['SERVER_NAME'].'/wechat_html/page/smsAppointment/smsVerify.html?code='.$v;
                    if($hash){
                        $nativeurl.='&hash='.$hash;
                    }else{
                        $nativeurl.='&mobile='.$order['order_mobile'];
                    }
                    $yyurl .= createShortUrl($nativeurl)."\r\n；";
                }
            }else{
                $hash = Db::name('order_consume_code')->where(['consume_code'=>$consume_code])->value('hash');
                $nativeurl= ($_SERVER['REQUEST_SCHEME']?$_SERVER['REQUEST_SCHEME']:'http').'://'.$_SERVER['SERVER_NAME'].'/wechat_html/page/smsAppointment/smsVerify.html?code='.$consume_code;

                if($hash){
                    $nativeurl.='&hash='.$hash;
                }else{
                    $nativeurl.='&mobile='.$order['order_mobile'];
                }

                $yyurl = createShortUrl($nativeurl)."\r\n；";
            }
            $content = str_replace('{yyurl}', $yyurl, $content);
        }

        $content = str_replace('{starttime}', date('m月d日',$order['product_startusetime']), $content);
        $content = str_replace('{yxq1}', date('Y-m-d', $order['product_startusetime']), $content);
        $content = str_replace('{yxq2}', date('Y-m-d', $order['product_endusetime']), $content);
        if( sendSmsCdxx($order['order_mobile'], $content)){
            $MsgData["admin_id"]   = session('admin.id');
            $MsgData["admin_name"] = session('admin.jname');
            $MsgData["mobile"]     = $order['order_mobile'];
            $MsgData["sendmsg"]    = $content;
            $MsgData["addtime"]    = time();
            Db::name("msg_sendlog")->insert($MsgData);
            return true;
        }
        return false;
    }


    /**
     * 口腔商品短信
     * @param $order
     * @param $consume_code
     * @param $cfg
     * @return bool
     */
    public function sendOrderSmsToTooth($order, $consume_code){
        $content = config('cdxx_sms.content_excel_create_order_tooth');
        $content = str_replace('{code}', $consume_code, $content);
        return sendSmsCdxx($order['order_mobile'], $content);
    }


    /**
     * 创建订单-后台购买
     * @param $order_no
     * @param $product
     * @param $attach
     * @param $user
     * @return int|string
     */
    private function buildOrder1($order_no, $data){
        $product = Db::name('product p')
                    ->field('c.*, p.product_name, p.product_status, p.product_del, p.product_reviewstatus,
                    p.price_type, p.product_returnall, p.product_reservation, p.product_isexpress, 
                    p.product_timelimit, p.product_numlimit, p.product_numlimit_num, p.product_starttime, p.product_endtime, 
                    p.product_startusetime, p.product_endusetime, p.merchant_id')
                    ->join('product_price c', 'c.product_id = p.product_id', 'left')
                    ->join('merchant m', 'm.merchant_id = p.merchant_id', 'left')
                    ->where(['p.product_id'=>$data['product_id'], 'c.price_id'=>$data['price_id'], 'm.merchant_status'=>2, 'c.price_status'=>1])
                    ->find();
        GLog('批量下单1','当前总共已售：'.$product['product_buynum'].';购买数量：'.$data['buynum'].';总库存：'.$product['product_totalnum']);
        $product['product_sku'] = $product['product_totalnum']-$product['product_buynum']; //剩余库存
        $product['product_sku'] += $this->verfiyProduct3($data["product_id"],$data["price_id"])["totalnum"];

        $vo['merchant_id'] = $product['merchant_id'];
        $vo['fen_merchant_id'] = $product['merchant_id'];
        $vo['user_id'] = $data['user_id'];
        $vo['order_no'] = $order_no;
        $vo['is_sys_giving'] = isset($data['is_sys_giving'])?$data['is_sys_giving']:0;
        $vo['order_mobile'] =isset($data['mobile'])? $data['mobile']:'';
        $vo['order_fullname'] =isset($data['concat'])? $data['concat']:'';

        $vo['order_leave'] = $data['remark'];
        $vo['address_id'] = '';
        //总金额
        $vo['order_totalfee'] = $data['price'] * $data['buynum'];//后台输入结算价为准
        $vo['order_payfee'] = $data['price'] * $data['buynum'];//后台输入结算价为准
        $vo['order_isexpress'] = $product['product_isexpress'];
        $vo['order_reservation'] = $product['product_reservation'];
        $vo['order_payment'] = 5;//后台下单支付状态
        $vo['order_status'] = 2;
        $vo['order_paytime'] = time();
        $vo['order_addtime'] = time();
        $vo['order_uptime'] = time();

        $orderId = Db::name('order')->insertGetId($vo);
        //创建附件信息
        $affiliatId = $this->buildOffiliate($orderId, $vo['order_payfee'], $product['coupon']);
        //关联商品数据
        $opId = $this->buildOProduct1($orderId, $product, $data);
        //更新库存
        $res = $this->upKucun($product, $data);
        if($orderId > 0 && $affiliatId > 0 && $opId > 0 && $res !== false ){
            return true;
        }else{
            return false;
        }
    }
    /**
     * @param $product_id  商品id
     * @param $price_id    规格id
     * @return array|false|\PDOStatement|string|\think\Model
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 获取商品除购买规格的其它启用规格的剩余库存
     */
    private function verfiyProduct3($product_id, $price_id){
        $condition[] = array("exp","product_id = {$product_id} and price_id <> $price_id and price_status = 1");

        $totalnum = Db::name("product_price")->field("sum(product_totalnum)-sum(product_buynum) as totalnum")->where($condition)->find();

        return $totalnum;
    }

    private function buildOffiliate($order_id, $order_payfee, $coupon){
        $vo['order_id'] = $order_id;
        if($coupon){
            $vo['coupon'] = $coupon['coupon_money'];
            $vo['coupon_id'] = $coupon['user_coupon_id'];
        }
        $vo['payamount'] = $order_payfee;
        return Db::name('order_affiliated')->insertGetId($vo);
    }

    private function buildOProduct1($order_id, $product, $data){
        $vo['order_id'] = $order_id;
        $vo['product_id'] = $product['product_id'];
        $vo['price_id'] = $product['price_id'];
        $vo['price_type'] = $product['price_type'];
        $vo['product_name'] = $product['product_name'];
        $vo['product_property'] = $product['product_property'];
        $vo['num'] = $data['buynum'];
        $vo['price'] = $data['price'];
        $vo['settle'] = $data['price_settle'];
        $vo['totalmoney'] = $data['price']*$data['buynum'];
        $vo['totalsettle'] = $data['price_settle']*$data['buynum'];
        $vo['product_startusetime'] = $product['product_startusetime'];
        $vo['product_endusetime'] = $product['product_endusetime'];
        $vo['product_returnall'] = $product['product_returnall'];
        $vo['commission'] = $product['price_commission']*$data['buynum'];
        $opId = Db::name('order_product')->insertGetId($vo);
        return $opId;
    }

    /**
     * 更新库存
     */
    private function upKucun($product, $data){
        $up['product_sales_volume'] = ['exp','product_sales_volume+'.$data['buynum']];
        //是否售罄
        GLog('批量下单2','当前总共已售：'.$product['product_buynum'].';购买数量：'.$data['buynum'].';总库存：'.$product['product_totalnum']);

//        if($product['product_buynum']*1+$data['buynum']*1 >= $product['product_totalnum']){
//            GLog('批量下单已售罄','当前总共已售：'.$product['product_buynum'].';购买数量：'.$data['buynum'].';总库存：'.$product['product_totalnum']);
//            $up['sold_out'] =1;
//            $up['sold_out_time'] =time();
//        }

        if( ($product['product_sku'] - $data['buynum'])< 1){
            GLog('批量下单已售罄','当前总共已售：'.$product['product_buynum'].';购买数量：'.$data['buynum'].';总库存：'.$product['product_totalnum']);
//            $up['sold_out'] =1;
//            $up['sold_out_time'] =time();
        }

        $res7 = Db::name('product')->where(['product_id'=>$product['product_id']])->update($up);
        $res8 = Db::name('product_price')->where(['price_id'=>$product['price_id']])->update(['product_buynum'=>['exp','product_buynum+'.$data['buynum']], 'product_dynamicnum'=>['exp','product_dynamicnum+'.$data['buynum']]]);
        return $res8;
    }



}
